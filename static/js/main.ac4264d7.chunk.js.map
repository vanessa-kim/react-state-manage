{"version":3,"sources":["atoms.ts","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","useForm","register","handleSubmit","setValue","useRecoilState","setToDos","useEffect","strToDos","localStorage","getItem","jsonToDos","JSON","parse","length","useRecoilValue","setItem","stringify","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","useSetRecoilState","onClick","event","name","currentTarget","targetIndex","findIndex","todo","newToDo","slice","DOING","DONE","editToDos","splice","ToDoList","setCategory","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardColor","cardBorderColor","document","getElementById"],"mappings":"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","file":"static/js/main.ac4264d7.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\r\n\r\nexport enum Categories {\r\n  'TO_DO' = 'TO_DO',\r\n  'DOING' = 'DOING',\r\n  'DONE' = 'DONE',\r\n}\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: Categories;\r\n}\r\n\r\n\r\nexport const categoryState = atom<Categories>({\r\n  key: 'category',\r\n  default: Categories.TO_DO,\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: 'toDo',\r\n  default: [],\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: 'toDoSelector',\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter(toDo => toDo.category === category);\r\n  }\r\n});","import { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { categoryState, toDoState } from '../atoms';\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const [toDos, setToDos] = useRecoilState(toDoState);\r\n  \r\n  // initial load from localstorage\r\n  useEffect(()=>{\r\n    const strToDos = localStorage.getItem('toDos');\r\n    const jsonToDos = strToDos && JSON.parse(strToDos);\r\n    if (jsonToDos && jsonToDos.length > 0) {\r\n      setToDos(jsonToDos);\r\n    }\r\n  }, []);\r\n\r\n  const category = useRecoilValue(categoryState);\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    setValue('toDo', '');\r\n    setToDos((oldToDos)=> [\r\n        { text: toDo, id: Date.now(), category }, \r\n        ...oldToDos, \r\n      ]);\r\n  }; \r\n  \r\n  // set localstorage everytime changes toDos\r\n  useEffect(()=>{\r\n    localStorage.setItem('toDos', JSON.stringify(toDos));\r\n  }, [toDos]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(handleValid)}>\r\n      <input \r\n        {...register('toDo', {\r\n          required: 'Please write a To Do.'\r\n        })} \r\n        placeholder=\"write a to do\" \r\n      />\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CreateToDo;","import React from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { IToDo, toDoState, Categories } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const { currentTarget: { name }} = event;\r\n    setToDos(oldToDos => {\r\n      const targetIndex = oldToDos.findIndex(todo => todo.id === id);\r\n      const newToDo = { text, id, category: name as any};\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex), \r\n        newToDo, \r\n        ...oldToDos.slice(targetIndex + 1)\r\n      ];\r\n    });\r\n  };\r\n  const deleteToDo = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setToDos(oldToDos => {\r\n      const targetIndex = oldToDos.findIndex(todo => todo.id === id);\r\n      const editToDos = [...oldToDos];\r\n      editToDos.splice(targetIndex, 1);\r\n      return editToDos;\r\n    });\r\n  };\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {category !== Categories.DOING &&<button name={Categories.DOING} onClick={onClick}>Doing</button>}\r\n      {category !== Categories.TO_DO &&<button name={Categories.TO_DO} onClick={onClick}>To Do</button>}\r\n      {category !== Categories.DONE && <button name={Categories.DONE} onClick={onClick}>Done</button>}\r\n      {<button onClick={deleteToDo}>Delete</button>}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;","import { useRecoilState, useRecoilValue } from 'recoil';\r\nimport CreateToDo from './CreateToDo';\r\nimport { toDoSelector, categoryState, Categories } from '../atoms'; \r\nimport ToDo from './ToDo';\r\nimport React from 'react';\r\n\r\nfunction ToDoList() {\r\n\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const onInput = (event:React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n      <select value={category} onInput={onInput}>\r\n        <option value={Categories.TO_DO}>To Do</option>\r\n        <option value={Categories.DOING}>Doing</option>\r\n        <option value={Categories.DONE}>Done</option>\r\n      </select>\r\n      <CreateToDo />\r\n      { toDos?.map(toDo => <ToDo key={toDo.id} {...toDo}/>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ToDoList;","import { createGlobalStyle } from 'styled-components';\nimport ToDoList from './components/ToDoList';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, menu, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  main, menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, main, menu, nav, section {\n    display: block;\n  }\n  /* HTML5 hidden-attribute fix for newer browsers */\n  *[hidden] {\n      display: none;\n  }\n  body {\n    line-height: 1;\n  }\n  menu, ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: 'Source Sans Pro', sans-serif;\n    background-color: ${props => props.theme.bgColor};\n    color: ${props => props.theme.textColor};\n  }\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { RecoilRoot } from 'recoil';\nimport { ThemeProvider } from 'styled-components';\nimport { darkTheme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme:DefaultTheme = {\r\n  bgColor: '#2f3640',\r\n  textColor: 'whitesmoke',\r\n  accentColor: '#00a8ff',\r\n  cardColor: '#2f3640',\r\n  cardBorderColor: 'whitesmoke',\r\n}\r\n"],"sourceRoot":""}